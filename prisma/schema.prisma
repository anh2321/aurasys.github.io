datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// üîê Solo para login
model Usuario {
  id          Int     @id @default(autoincrement())
  nombre      String
  contrase√±a  String
  cargo       String
}

// üë• Clientes que compran y pueden generar cuentas por cobrar
model Cliente {
  id                 Int                 @id @default(autoincrement())
  nombre             String
  telefono           String  @unique
  facturas           Factura[]          // Relaci√≥n 1:N
  cuentasPorCobrar   CuentaPorCobrar[]  // Relaci√≥n 1:N
  informes           Informe[]          // Relaci√≥n con informes (ingresos)
}

// üßæ Factura relacionada con un cliente
model Factura {
  id              Int                 @id @default(autoincrement())
  fecha           DateTime           @default(now())
  formaPago       String
  vendedor        String
  administrador   String
  referencia      String?
  saldo           Float
  total           Float
  efectivo        Float?
  cambio          Float?
  estado          String             @default("pendiente")
  clienteId       Int
  cliente         Cliente            @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  productos       FacturaProducto[]  // ‚Üê detalle de productos
  cuentaPorCobrar CuentaPorCobrar?   // ‚Üê 1:1 opcional
  informes        Informe[]          // Relaci√≥n con informes (ingresos)
}

// üßÆ Relaci√≥n entre productos y cada factura (detalle de compra)
model FacturaProducto {
  id             Int      @id @default(autoincrement())
  facturaId      Int
  factura        Factura  @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  productoId     Int
  producto       Producto @relation(fields: [productoId], references: [id])
  cantidad       Int
  precioUnitario Float
  descuento      Float
  ivaPorcentaje  Float
  totalNeto      Float
}

// üè¶ Si el cliente no paga todo, queda registrado aqu√≠
model CuentaPorCobrar {
  id           Int      @id @default(autoincrement())
  total        Float
  fechaEmision DateTime @default(now())
  estado       String   @default("pendiente")
  facturaId    Int      @unique
  factura      Factura  @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  clienteId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

// üì¶ Productos en venta
model Producto {
  id             Int        @id @default(autoincrement())
  codigo         String     @unique
  tipo           String
  nombre         String
  costo          Float
  precioUnitario Float?
  unidades       Int?
  proveedorId    Int?
  proveedor      Proveedor? @relation(fields: [proveedorId], references: [id])
  fechaIngreso   DateTime   @default(now())
  createdAt      DateTime   @default(now())
  facturas       FacturaProducto[]
  informes       Informe[]         // Relaci√≥n con informes (gastos)
}

// üè¢ Proveedores de productos
model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]
  informes  Informe[]  // Relaci√≥n con informes (gastos)
}

// üìä Ingresos y Gastos de la empresa
model Informe {
  id           Int       @id @default(autoincrement())
  tipo         String    // "ingreso" o "gasto"
  descripcion  String
  fecha        DateTime  @default(now())
  monto        Float

  // Relaci√≥n con Cliente (solo si es ingreso)
  clienteId    Int?
  cliente      Cliente?  @relation(fields: [clienteId], references: [id], onDelete: SetNull)

  // Relaci√≥n con Factura (solo si es ingreso)
  facturaId    Int?
  factura      Factura?  @relation(fields: [facturaId], references: [id], onDelete: SetNull)

  // Relaci√≥n con Proveedor (solo si es gasto)
  proveedorId  Int?
  proveedor    Proveedor? @relation(fields: [proveedorId], references: [id], onDelete: SetNull)

  // Relaci√≥n con Producto (solo si es gasto)
  productoId   Int?
  producto     Producto?  @relation(fields: [productoId], references: [id], onDelete: SetNull)
}
